(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
'use strict';

var Triterm = require('./');

var t = Triterm({handleInput: function(tt, ev) {
  if (ev.keyCode === 8) {
    this.backspace();
    return;
  }

  if (tt !== null) {
    this.writeTTChar(tt);
    t.refresh();
  }
}});

t.writeUChar('H');
t.writeUChar('i');
t.refresh();

global.t = t;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./":12}],2:[function(require,module,exports){
'use strict';

var vkey = require('vkey');
var fromUnicode = require('./utext').fromUnicode;

// map virtual key to Unicode corresponding to trit-text, with modifiers
var _keymap = {
  // vkey: normal, shifted, control, shift-control
  A: ['a', 'A', '☺', ''],
  B: ['b', 'B', '☻', ''],
  C: ['c', 'C', '♥', ''],
  D: ['d', 'D', '♦', ''],
  E: ['e', 'E', '•', ''],
  F: ['f', 'F', '◘', ''],
  G: ['g', 'G', '○', ''],
  H: ['h', 'H', '◙', ''],
  I: ['i', 'I', '♂', ''],
  J: ['j', 'J', '♀', ''],
  K: ['k', 'K', '☼', ''],
  L: ['l', 'L', '▒', ''],
  M: ['m', 'M', '←', ''],
  N: ['n', 'N', '→', ''],
  O: ['o', 'O', '↑', ''],
  P: ['p', 'P', '↓', ''],
  Q: ['q', 'Q', '', ''],
  R: ['r', 'R', '', ''],
  S: ['s', 'S', '', ''],
  T: ['t', 'T', '', ''],
  U: ['u', 'U', '', ''],
  V: ['v', 'V', '', ''],
  W: ['w', 'W', '', ''],
  X: ['x', 'X', '≈', ''],
  Y: ['y', 'Y', '', ''],
  Z: ['z', 'Z', '', ''],

  '`': ['`', '~', '', ''],
  1: ['1', '!', '', ''],
  2: ['2', '@', '', '\u0000'],
  3: ['3', '#', '', ''],
  4: ['4', '$', '', ''],
  5: ['5', '%', '', ''],
  6: ['6', '^', '', ''],
  7: ['7', '&', '', ''],
  8: ['8', '*', '', ''],
  9: ['9', '(', '', ''],
  0: ['0', ')', '', ''],
  '-': ['-', '_', '‾', ''],
  '=': ['=', '+', '±', '∓'],
  '[': ['[', '{', '', ''],
  ']': [']', '}', '', ''],
  '\\': ['\\', '|', '', ''],
  ';': [';', ':', '', ''],
  '\'': ['\\', '"', '', ''],
  ',': [',', '<', '«', ''],
  '.': ['.', '>', '»', ''],
  '/': ['/', '?', '', ''],

  '<backspace>': ['\u0000', '\u0000', '', ''], // null for now, seems reasonable TODO: shift/control backspace?
  '<escape>': ['⌂', '⌂', '', ''],
  '<enter>': ['\n', '\n', '', ''],
  '<space>': [' ', ' ', ' ', ' '],
};

function fromEvent(ev) {
  var vkeyChar = vkey[ev.keyCode];

  var flags = (ev.shiftKey ? 1 : 0) + (ev.ctrlKey ? 2 : 0); // TODO: metaKey(cmd)? altKey(opt)?

  var varChars = _keymap[vkeyChar];
  if (!varChars) return null;

  if (varChars[flags] === '' && flags === 3) flags = 2; // no shift-control variant, try control
  if (varChars[flags] === '' && flags === 2) flags = 0; // no control variant, try normal

  var c = varChars[flags];

  var tt = fromUnicode(c);
  if (tt == null) return null;

  if (ev.altKey) tt = -tt; // alt/option key inverts

  return tt;
}

module.exports = fromEvent;

},{"./utext":5,"vkey":3}],3:[function(require,module,exports){
var ua = typeof window !== 'undefined' ? window.navigator.userAgent : ''
  , isOSX = /OS X/.test(ua)
  , isOpera = /Opera/.test(ua)
  , maybeFirefox = !/like Gecko/.test(ua) && !isOpera

var i, output = module.exports = {
  0:  isOSX ? '<menu>' : '<UNK>'
, 1:  '<mouse 1>'
, 2:  '<mouse 2>'
, 3:  '<break>'
, 4:  '<mouse 3>'
, 5:  '<mouse 4>'
, 6:  '<mouse 5>'
, 8:  '<backspace>'
, 9:  '<tab>'
, 12: '<clear>'
, 13: '<enter>'
, 16: '<shift>'
, 17: '<control>'
, 18: '<alt>'
, 19: '<pause>'
, 20: '<caps-lock>'
, 21: '<ime-hangul>'
, 23: '<ime-junja>'
, 24: '<ime-final>'
, 25: '<ime-kanji>'
, 27: '<escape>'
, 28: '<ime-convert>'
, 29: '<ime-nonconvert>'
, 30: '<ime-accept>'
, 31: '<ime-mode-change>'
, 27: '<escape>'
, 32: '<space>'
, 33: '<page-up>'
, 34: '<page-down>'
, 35: '<end>'
, 36: '<home>'
, 37: '<left>'
, 38: '<up>'
, 39: '<right>'
, 40: '<down>'
, 41: '<select>'
, 42: '<print>'
, 43: '<execute>'
, 44: '<snapshot>'
, 45: '<insert>'
, 46: '<delete>'
, 47: '<help>'
, 91: '<meta>'  // meta-left -- no one handles left and right properly, so we coerce into one.
, 92: '<meta>'  // meta-right
, 93: isOSX ? '<meta>' : '<menu>'      // chrome,opera,safari all report this for meta-right (osx mbp).
, 95: '<sleep>'
, 106: '<num-*>'
, 107: '<num-+>'
, 108: '<num-enter>'
, 109: '<num-->'
, 110: '<num-.>'
, 111: '<num-/>'
, 144: '<num-lock>'
, 145: '<scroll-lock>'
, 160: '<shift-left>'
, 161: '<shift-right>'
, 162: '<control-left>'
, 163: '<control-right>'
, 164: '<alt-left>'
, 165: '<alt-right>'
, 166: '<browser-back>'
, 167: '<browser-forward>'
, 168: '<browser-refresh>'
, 169: '<browser-stop>'
, 170: '<browser-search>'
, 171: '<browser-favorites>'
, 172: '<browser-home>'

  // ff/osx reports '<volume-mute>' for '-'
, 173: isOSX && maybeFirefox ? '-' : '<volume-mute>'
, 174: '<volume-down>'
, 175: '<volume-up>'
, 176: '<next-track>'
, 177: '<prev-track>'
, 178: '<stop>'
, 179: '<play-pause>'
, 180: '<launch-mail>'
, 181: '<launch-media-select>'
, 182: '<launch-app 1>'
, 183: '<launch-app 2>'
, 186: ';'
, 187: '='
, 188: ','
, 189: '-'
, 190: '.'
, 191: '/'
, 192: '`'
, 219: '['
, 220: '\\'
, 221: ']'
, 222: "'"
, 223: '<meta>'
, 224: '<meta>'       // firefox reports meta here.
, 226: '<alt-gr>'
, 229: '<ime-process>'
, 231: isOpera ? '`' : '<unicode>'
, 246: '<attention>'
, 247: '<crsel>'
, 248: '<exsel>'
, 249: '<erase-eof>'
, 250: '<play>'
, 251: '<zoom>'
, 252: '<no-name>'
, 253: '<pa-1>'
, 254: '<clear>'
}

for(i = 58; i < 65; ++i) {
  output[i] = String.fromCharCode(i)
}

// 0-9
for(i = 48; i < 58; ++i) {
  output[i] = (i - 48)+''
}

// A-Z
for(i = 65; i < 91; ++i) {
  output[i] = String.fromCharCode(i)
}

// num0-9
for(i = 96; i < 106; ++i) {
  output[i] = '<num-'+(i - 96)+'>'
}

// F1-F24
for(i = 112; i < 136; ++i) {
  output[i] = 'F'+(i-111)
}

},{}],4:[function(require,module,exports){
'use strict';

var _vtext = require('./vtext');
var toUnicode = require('./utext').toUnicode;
var fromUnicode = require('./utext').fromUnicode;
var isInverted = require('./utext').isInverted;
var allUnicode = require('./utext').allUnicode;
var fromEvent = require('./etext');

function toTritmap(n) {
  var inverted = isInverted(n);
  var unicode = toUnicode(n);
  if (unicode === undefined) throw new Error('no character for trit-text codepoint:'+n);
  var vtext = _vtext[unicode];
  if (!vtext) throw new Error('no tritmap for character: '+n);

  var tritmap = '';

  for (var i = 0; i < vtext.length; ++i) {
    // for source code readability, the tritmap is stored encoded TODO: store converted if too slow
    switch(vtext.charAt(i)) {
      case '\n':
        break;
      case '.':
        tritmap += '0';
        break;
      case '*':
        tritmap += inverted ? 'i' : '1';
        break;
      default:
        throw new Error('invalid vtext data for tritmap character '+n+': '+vtext.charAt(i));
      }
  }

  return tritmap;
}

module.exports = {
  toUnicode: toUnicode,
  isInverted: isInverted,
  fromUnicode: fromUnicode,
  fromEvent: fromEvent,
  allUnicode: allUnicode,
  toTritmap9x14: toTritmap,
};

},{"./etext":2,"./utext":5,"./vtext":6}],5:[function(require,module,exports){
'use strict';

/*
5-trit text format, analogous to 7-bit ASCII

+1 to +121 normal text, black on white
-1 to -121 inverted, reverse video white on black
*/

var _chars =  [
// control/digits
/* 00000 = 0 */  '\0', // NUL   null, string terminator, only unbalanced; in serial mode zero-width, matrix mode alternating flashing normal/inverted
/* 00001 = 1 */  '1',
/* 0001i = 2 */  '2',
/* 00010 = 3 */  '3',
/* 00011 = 4 */  '4',
/* 001ii = 5 */  '5',
/* 001i0 = 6 */  '6',
/* 001i1 = 7 */  '7',
/* 0010i = 8 */  '8',
/* 00100 = 9 */  '9',
/* 00101 = 10 */ '0',
/* 0011i = 11 */ '⌂', // escape/reserved code, U+2302 house
/* 00110 = 12 */ '\n', // newline, \n, linefeed
/* 00111 = 13 */ ' ', // space

// left punctuation (01xxx=left, pairs with 10xxx=right, and control(1i)=01, shift-control(11)=10)
/* 01iii = 14 */ '@',
/* 01ii0 = 15 */ '☺', // U+263A smiley
/* 01ii1 = 16 */ '♥', // U+2665 hearts
/* 01i0i = 17 */ '♣', // U+2663 clubs
/* 01i00 = 18 */ '•', // U+2022 bullet
/* 01i01 = 19 */ '○', // U+25CB circle
/* 01i1i = 20 */ '♂', // U+2642 male
/* 01i10 = 21 */ '☼', // U+263C solar
/* 01i11 = 22 */ '←', // U+2190 left arrow
/* 010ii = 23 */ '↑', // U+2191 up arrow
/* 010i0 = 24 */ '«', // U+00AB left-pointing double angle quot
/* 010i1 = 25 */ '±', // U+00B1 plus-minus sign
/* 0100i = 26 */ '(',
/* 01000 = 27 */ '[',
/* 01001 = 28 */ '<',
/* 0101i = 29 */ '{',
/* 01010 = 30 */ '\\',
/* 01011 = 31 */ '.',
/* 011ii = 32 */ ';',
/* 011i0 = 33 */ '\'',
/* 011i1 = 34 */ '!',
/* 0110i = 35 */ '#',
/* 01100 = 36 */ '%',
/* 01101 = 37 */ '-',
/* 0111i = 38 */ '*',
/* 01110 = 39 */ '=',
/* 01111 = 40 */ '^',

// lowercase letters (1cxxxx = letters, where c=case, i=lower, 1=upper)
/* 1iiii = 41 */ '‾', // U+203E overline (standalone)
/* 1iii0 = 42 */ 'a',
/* 1iii1 = 43 */ 'b',
/* 1ii0i = 44 */ 'c',
/* 1ii00 = 45 */ 'd',
/* 1ii01 = 46 */ 'e',
/* 1ii1i = 47 */ 'f',
/* 1ii10 = 48 */ 'g',
/* 1ii11 = 49 */ 'h',
/* 1i0ii = 50 */ 'i',
/* 1i0i0 = 51 */ 'j',
/* 1i0i1 = 52 */ 'k',
/* 1i00i = 53 */ 'l',
/* 1i000 = 54 */ 'm',
/* 1i001 = 55 */ 'n',
/* 1i01i = 56 */ 'o',
/* 1i010 = 57 */ 'p',
/* 1i011 = 58 */ 'q',
/* 1i1ii = 59 */ 'r',
/* 1i1i0 = 60 */ 's',
/* 1i1i1 = 61 */ 't',
/* 1i10i = 62 */ 'u',
/* 1i100 = 63 */ 'v',
/* 1i101 = 64 */ 'w',
/* 1i11i = 65 */ 'x',
/* 1i110 = 66 */ 'y',
/* 1i111 = 67 */ 'z',

// right punctuation
/* 10iii = 68 */ '`',
/* 10ii0 = 69 */ '☻', // U+263B inverted smiley
/* 10ii1 = 70 */ '♦', // U+2666 diamonds
/* 10i0i = 71 */ '♠', // U+2660 spades
/* 10i00 = 72 */ '◘', // U+25D8 inverted bullet
/* 10i01 = 73 */ '◙', // U+25D9 inverted circle
/* 10i1i = 74 */ '♀', // U+2640 female
/* 10i10 = 75 */ '▒', // U+2592 medium shade
/* 10i11 = 76 */ '→', // U+2192 right arrow
/* 100ii = 77 */ '↓', // U+2193 down arrow
/* 100i0 = 78 */ '»', // U+00BB
/* 100i1 = 79 */ '∓', // U+2213 minus-or-plus sign
/* 1000i = 80 */ ')',
/* 10000 = 81 */ ']',
/* 10001 = 82 */ '>',
/* 1001i = 83 */ '}',
/* 10010 = 84 */ '/',
/* 10011 = 85 */ ',',
/* 101ii = 86 */ ':',
/* 101i0 = 87 */ '"',
/* 101i1 = 88 */ '?',
/* 1010i = 89 */ '$',
/* 10100 = 90 */ '&',
/* 10101 = 91 */ '+',
/* 1011i = 92 */ '|',
/* 10110 = 93 */ '≈', // U+2248 approximately equal
/* 10111 = 94 */ '~',

// uppercase letters - toggle 2nd mst i=lowercase,1=uppercase (includes _ and ‾, allow in program identifiers)
/* 11iii = 95 */ '_', // underline
/* 11ii0 = 96 */ 'A',
/* 11ii1 = 97 */ 'B',
/* 11i0i = 98 */ 'C',
/* 11i00 = 99 */ 'D',
/* 11i01 = 100 */ 'E',
/* 11i1i = 101 */ 'F',
/* 11i10 = 102 */ 'G',
/* 11i11 = 103 */ 'H',
/* 110ii = 104 */ 'I',
/* 110i0 = 105 */ 'J',
/* 110i1 = 106 */ 'K',
/* 1100i = 107 */ 'L',
/* 11000 = 108 */ 'M',
/* 11001 = 109 */ 'N',
/* 1101i = 110 */ 'O',
/* 11010 = 111 */ 'P',
/* 11011 = 112 */ 'Q',
/* 111ii = 113 */ 'R',
/* 111i0 = 114 */ 'S',
/* 111i1 = 115 */ 'T',
/* 1110i = 116 */ 'U',
/* 11100 = 117 */ 'V',
/* 11101 = 118 */ 'W',
/* 1111i = 119 */ 'X',
/* 11110 = 120 */ 'Y',
/* 11111 = 121 */ 'Z',
];

function toUnicode(n) {
  return _chars[Math.abs(n)];
}

function isInverted(n) {
  return n < 0;
}

function fromUnicode(c, inverted) {
  var n = _chars.indexOf(c);
  if (n === -1) return null; // TODO: extended escape for full Unicode support?
  if (inverted) n = -n;

  return n;
}

module.exports = {
  toUnicode: toUnicode,
  isInverted: isInverted,
  fromUnicode: fromUnicode,
  allUnicode: _chars,
};

},{}],6:[function(require,module,exports){
module.exports={
'\u0000':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'1':
'.........\n'+
'.........\n'+
'...**....\n'+
'..***....\n'+
'.****....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'.******..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'2':
'.........\n'+
'.........\n'+
'.*****...\n'+
'**...**..\n'+
'.....**..\n'+
'....**...\n'+
'...**....\n'+
'..**.....\n'+
'.**......\n'+
'**...**..\n'+
'*******..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'3':
'.........\n'+
'.........\n'+
'.*****...\n'+
'**...**..\n'+
'.....**..\n'+
'.....**..\n'+
'..****...\n'+
'.....**..\n'+
'.....**..\n'+
'**...**..\n'+
'.*****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'4':
'.........\n'+
'.........\n'+
'....**...\n'+
'...***...\n'+
'..****...\n'+
'.**.**...\n'+
'**..**...\n'+
'*******..\n'+
'....**...\n'+
'....**...\n'+
'...****..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'5':
'.........\n'+
'.........\n'+
'*******..\n'+
'**.......\n'+
'**.......\n'+
'**.......\n'+
'******...\n'+
'.....**..\n'+
'.....**..\n'+
'**...**..\n'+
'.*****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'6':
'.........\n'+
'.........\n'+
'..***....\n'+
'.**......\n'+
'**.......\n'+
'**.......\n'+
'******...\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'.*****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'7':
'.........\n'+
'.........\n'+
'*******..\n'+
'**...**..\n'+
'.....**..\n'+
'....**...\n'+
'...**....\n'+
'..**.....\n'+
'..**.....\n'+
'..**.....\n'+
'..**.....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'8':
'.........\n'+
'.........\n'+
'.*****...\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'.*****...\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'.*****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'9':
'.........\n'+
'.........\n'+
'.*****...\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'.******..\n'+
'.....**..\n'+
'.....**..\n'+
'....**...\n'+
'.****....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'0':
'.........\n'+
'.........\n'+
'.*****...\n'+
'**...**..\n'+
'**..***..\n'+
'**.****..\n'+
'****.**..\n'+
'***..**..\n'+
'**...**..\n'+
'**...**..\n'+
'.*****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'⌂':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'...*.....\n'+
'..***....\n'+
'.**.**...\n'+
'**...**..\n'+
'**...**..\n'+
'*******..\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'\n':
'.........\n'+
'.........\n'+
'..******.\n'+
'..**..**.\n'+
'..******.\n'+
'..**.....\n'+
'..**.....\n'+
'..**.....\n'+
'.***.....\n'+
'****.....\n'+
'***......\n'+
'.........\n'+
'.........\n'+
'.........\n',

' ':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'@':
'.........\n'+
'.........\n'+
'.*****...\n'+
'**...**..\n'+
'**...**..\n'+
'**.****..\n'+
'**.****..\n'+
'**.****..\n'+
'**.***...\n'+
'**.......\n'+
'.*****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'☺':
'.........\n'+
'.........\n'+
'.******..\n'+
'*......*.\n'+
'*.*..*.*.\n'+
'*......*.\n'+
'*......*.\n'+
'*.****.*.\n'+
'*..**..*.\n'+
'*......*.\n'+
'.******..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'♥':
'.........\n'+
'.........\n'+
'.........\n'+
'.**.**...\n'+
'*******..\n'+
'*******..\n'+
'*******..\n'+
'*******..\n'+
'.*****...\n'+
'..***....\n'+
'...*.....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'♣':
'.........\n'+
'.........\n'+
'...**....\n'+
'..****...\n'+
'..****...\n'+
'***..***.\n'+
'***..***.\n'+
'***..***.\n'+
'...**....\n'+
'...**....\n'+
'..****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'•':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'...**....\n'+
'..****...\n'+
'..****...\n'+
'...**....\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'○':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'..****...\n'+
'.**..**..\n'+
'.*....*..\n'+
'.*....*..\n'+
'.**..**..\n'+
'..****...\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'♂':
'.........\n'+
'.........\n'+
'...****..\n'+
'....***..\n'+
'...**.*..\n'+
'..**..*..\n'+
'.****....\n'+
'**..**...\n'+
'**..**...\n'+
'**..**...\n'+
'.****....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'☼':
'.........\n'+
'.........\n'+
'...**....\n'+
'...**....\n'+
'**.**.**.\n'+
'..****...\n'+
'***..***.\n'+
'..****...\n'+
'**.**.**.\n'+
'...**....\n'+
'...**....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'←':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'..**.....\n'+
'.**......\n'+
'*******..\n'+
'.**......\n'+
'..**.....\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'↑':
'.........\n'+
'.........\n'+
'...**....\n'+
'..****...\n'+
'.******..\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'«':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'..**.**..\n'+
'.**.**...\n'+
'**.**....\n'+
'.**.**...\n'+
'..**.**..\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'±':
'.........\n'+
'.........\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'********.\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'.........\n'+
'********.\n'+
'.........\n'+
'.........\n'+
'.........\n',

'(':
'.........\n'+
'.........\n'+
'....**...\n'+
'...**....\n'+
'..**.....\n'+
'..**.....\n'+
'..**.....\n'+
'..**.....\n'+
'..**.....\n'+
'...**....\n'+
'....**...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'[':
'.........\n'+
'.........\n'+
'..****...\n'+
'..**.....\n'+
'..**.....\n'+
'..**.....\n'+
'..**.....\n'+
'..**.....\n'+
'..**.....\n'+
'..**.....\n'+
'..****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'<':
'.........\n'+
'.........\n'+
'.....**..\n'+
'....**...\n'+
'...**....\n'+
'..**.....\n'+
'.**......\n'+
'..**.....\n'+
'...**....\n'+
'....**...\n'+
'.....**..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'{':
'.........\n'+
'.........\n'+
'....***..\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'.***.....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'....***..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'\\':
'.........\n'+
'.........\n'+
'*........\n'+
'**.......\n'+
'***......\n'+
'.***.....\n'+
'..***....\n'+
'...***...\n'+
'....***..\n'+
'.....**..\n'+
'......*..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'.':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'...**....\n'+
'...**....\n'+
'.........\n'+
'.........\n'+
'.........\n',

';':
'.........\n'+
'.........\n'+
'.........\n'+
'...**....\n'+
'...**....\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'...**....\n'+
'...**....\n'+
'..**.....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'\'':
'.........\n'+
'..**.....\n'+
'..**.....\n'+
'..**.....\n'+
'.**......\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'!':
'.........\n'+
'.........\n'+
'...**....\n'+
'..****...\n'+
'..****...\n'+
'..****...\n'+
'...**....\n'+
'...**....\n'+
'.........\n'+
'...**....\n'+
'...**....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'#':
'.........\n'+
'.........\n'+
'.**.**...\n'+
'.**.**...\n'+
'*******..\n'+
'.**.**...\n'+
'.**.**...\n'+
'.**.**...\n'+
'*******..\n'+
'.**.**...\n'+
'.**.**...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'%':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'**....*..\n'+
'**...**..\n'+
'....**...\n'+
'...**....\n'+
'..**.....\n'+
'.**..**..\n'+
'**...**..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'-':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'********.\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'*':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.**..**..\n'+
'..****...\n'+
'********.\n'+
'..****...\n'+
'.**..**..\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'=':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.******..\n'+
'.........\n'+
'.........\n'+
'.******..\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'^':
'...*.....\n'+
'..***....\n'+
'.**.**...\n'+
'**...**..\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'‾':
'.........\n'+
'********.\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'a':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.****....\n'+
'....**...\n'+
'.*****...\n'+
'**..**...\n'+
'**..**...\n'+
'.***.**..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'b':
'.........\n'+
'.........\n'+
'***......\n'+
'.**......\n'+
'.**......\n'+
'.****....\n'+
'.**.**...\n'+
'.**..**..\n'+
'.**..**..\n'+
'.**..**..\n'+
'.*****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'c':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.*****...\n'+
'**...**..\n'+
'**.......\n'+
'**.......\n'+
'**...**..\n'+
'.*****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'd':
'.........\n'+
'.........\n'+
'...***...\n'+
'....**...\n'+
'....**...\n'+
'..****...\n'+
'.**.**...\n'+
'**..**...\n'+
'**..**...\n'+
'**..**...\n'+
'.***.**..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'e':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.*****...\n'+
'**...**..\n'+
'*******..\n'+
'**.......\n'+
'**...**..\n'+
'.*****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'f':
'.........\n'+
'.........\n'+
'..***....\n'+
'.**.**...\n'+
'.**..*...\n'+
'.**......\n'+
'****.....\n'+
'.**......\n'+
'.**......\n'+
'.**......\n'+
'****.....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'g':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.***.**..\n'+
'**..**...\n'+
'**..**...\n'+
'**..**...\n'+
'.*****...\n'+
'....**...\n'+
'**..**...\n'+
'.****....\n'+
'.........\n',

'h':
'.........\n'+
'.........\n'+
'***......\n'+
'.**......\n'+
'.**......\n'+
'.**.**...\n'+
'.***.**..\n'+
'.**..**..\n'+
'.**..**..\n'+
'.**..**..\n'+
'***..**..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'i':
'.........\n'+
'.........\n'+
'...**....\n'+
'...**....\n'+
'.........\n'+
'..***....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'..****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'j':
'.........\n'+
'.........\n'+
'.....**..\n'+
'.....**..\n'+
'.........\n'+
'....***..\n'+
'.....**..\n'+
'.....**..\n'+
'.....**..\n'+
'.....**..\n'+
'.**..**..\n'+
'.**..**..\n'+
'..****...\n'+
'.........\n',

'k':
'.........\n'+
'.........\n'+
'***......\n'+
'.**......\n'+
'.**......\n'+
'.**..**..\n'+
'.**.**...\n'+
'.****....\n'+
'.**.**...\n'+
'.**..**..\n'+
'***..**..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'l':
'.........\n'+
'.........\n'+
'..***....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'..****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'm':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'***..**..\n'+
'********.\n'+
'**.**.**.\n'+
'**.**.**.\n'+
'**.**.**.\n'+
'**.**.**.\n'+
'.........\n'+
'.........\n'+
'.........\n',

'n':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'**.***...\n'+
'.**..**..\n'+
'.**..**..\n'+
'.**..**..\n'+
'.**..**..\n'+
'.**..**..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'o':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.*****...\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'.*****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'p':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'**.***...\n'+
'.**..**..\n'+
'.**..**..\n'+
'.**..**..\n'+
'.*****...\n'+
'.**......\n'+
'.**......\n'+
'****.....\n'+
'.........\n',

'q':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.***.**..\n'+
'**..**...\n'+
'**..**...\n'+
'**..**...\n'+
'.*****...\n'+
'....**...\n'+
'....**...\n'+
'...****..\n'+
'.........\n',

'r':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'**.***...\n'+
'.***.**..\n'+
'.**..**..\n'+
'.**......\n'+
'.**......\n'+
'****.....\n'+
'.........\n'+
'.........\n'+
'.........\n',

's':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.*****...\n'+
'**...**..\n'+
'.***.....\n'+
'...***...\n'+
'**...**..\n'+
'.*****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

't':
'.........\n'+
'.........\n'+
'...*.....\n'+
'..**.....\n'+
'..**.....\n'+
'******...\n'+
'..**.....\n'+
'..**.....\n'+
'..**.....\n'+
'..**.**..\n'+
'...***...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'u':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'**..**...\n'+
'**..**...\n'+
'**..**...\n'+
'**..**...\n'+
'**..**...\n'+
'.***.**..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'v':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'**....**.\n'+
'**....**.\n'+
'**....**.\n'+
'.**..**..\n'+
'..****...\n'+
'...**....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'w':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'**....**.\n'+
'**....**.\n'+
'**.**.**.\n'+
'**.**.**.\n'+
'********.\n'+
'.**..**..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'x':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'**...**..\n'+
'.**.**...\n'+
'..***....\n'+
'..***....\n'+
'.**.**...\n'+
'**...**..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'y':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'.******..\n'+
'.....**..\n'+
'....**...\n'+
'*****....\n'+
'.........\n',

'z':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'*******..\n'+
'**..**...\n'+
'...**....\n'+
'..**.....\n'+
'.**..**..\n'+
'*******..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'`':
'..**.....\n'+
'..**.....\n'+
'...**....\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'☻':
'.........\n'+
'.........\n'+
'.******..\n'+
'********.\n'+
'**.**.**.\n'+
'********.\n'+
'********.\n'+
'**....**.\n'+
'***..***.\n'+
'********.\n'+
'.******..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'♦':
'.........\n'+
'.........\n'+
'.........\n'+
'...*.....\n'+
'..***....\n'+
'.*****...\n'+
'*******..\n'+
'.*****...\n'+
'..***....\n'+
'...*.....\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'♠':
'.........\n'+
'.........\n'+
'...**....\n'+
'..****...\n'+
'.******..\n'+
'********.\n'+
'********.\n'+
'.******..\n'+
'...**....\n'+
'...**....\n'+
'..****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'◘':
'********.\n'+
'********.\n'+
'********.\n'+
'********.\n'+
'********.\n'+
'***..***.\n'+
'**....**.\n'+
'**....**.\n'+
'***..***.\n'+
'********.\n'+
'********.\n'+
'********.\n'+
'********.\n'+
'********.\n',

'◙':
'********.\n'+
'********.\n'+
'********.\n'+
'********.\n'+
'**....**.\n'+
'*..**..*.\n'+
'*.****.*.\n'+
'*.****.*.\n'+
'*..**..*.\n'+
'**....**.\n'+
'********.\n'+
'********.\n'+
'********.\n'+
'********.\n',

'♀':
'.........\n'+
'.........\n'+
'..****...\n'+
'.**..**..\n'+
'.**..**..\n'+
'.**..**..\n'+
'..****...\n'+
'...**....\n'+
'.******..\n'+
'...**....\n'+
'...**....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'▒':
'.*.*.*.*.\n'+
'*.*.*.*..\n'+
'.*.*.*.*.\n'+
'*.*.*.*..\n'+
'.*.*.*.*.\n'+
'*.*.*.*..\n'+
'.*.*.*.*.\n'+
'*.*.*.*..\n'+
'.*.*.*.*.\n'+
'*.*.*.*..\n'+
'.*.*.*.*.\n'+
'*.*.*.*..\n'+
'.*.*.*.*.\n'+
'*.*.*.*..\n',

'→':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'...**....\n'+
'....**...\n'+
'*******..\n'+
'....**...\n'+
'...**....\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'↓':
'.........\n'+
'.........\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'.******..\n'+
'..****...\n'+
'...**....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'»':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'**.**....\n'+
'.**.**...\n'+
'..**.**..\n'+
'.**.**...\n'+
'**.**....\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'∓':
'.........\n'+
'.........\n'+
'********.\n'+
'.........\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'********.\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'.........\n'+
'.........\n'+
'.........\n',

')':
'.........\n'+
'.........\n'+
'..**.....\n'+
'...**....\n'+
'....**...\n'+
'....**...\n'+
'....**...\n'+
'....**...\n'+
'....**...\n'+
'...**....\n'+
'..**.....\n'+
'.........\n'+
'.........\n'+
'.........\n',

']':
'.........\n'+
'.........\n'+
'..****...\n'+
'....**...\n'+
'....**...\n'+
'....**...\n'+
'....**...\n'+
'....**...\n'+
'....**...\n'+
'....**...\n'+
'..****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'>':
'.........\n'+
'.........\n'+
'.**......\n'+
'..**.....\n'+
'...**....\n'+
'....**...\n'+
'.....**..\n'+
'....**...\n'+
'...**....\n'+
'..**.....\n'+
'.**......\n'+
'.........\n'+
'.........\n'+
'.........\n',

'}':
'.........\n'+
'.........\n'+
'.***.....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'....***..\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'.***.....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'/':
'.........\n'+
'.........\n'+
'......*..\n'+
'.....**..\n'+
'....**...\n'+
'...**....\n'+
'..**.....\n'+
'.**......\n'+
'**.......\n'+
'*........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

',':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'..**.....\n'+
'.........\n'+
'.........\n',

':':
'.........\n'+
'.........\n'+
'.........\n'+
'...**....\n'+
'...**....\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'...**....\n'+
'...**....\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'"':
'.........\n'+
'.**...**.\n'+
'.**...**.\n'+
'.**...**.\n'+
'..*...*..\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'?':
'.........\n'+
'.........\n'+
'.*****...\n'+
'**...**..\n'+
'**...**..\n'+
'....**...\n'+
'...**....\n'+
'...**....\n'+
'.........\n'+
'...**....\n'+
'...**....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'$':
'...**....\n'+
'...**....\n'+
'.*****...\n'+
'**...**..\n'+
'**....*..\n'+
'**.......\n'+
'.*****...\n'+
'.....**..\n'+
'*....**..\n'+
'**...**..\n'+
'.*****...\n'+
'...**....\n'+
'...**....\n'+
'.........\n',

'&':
'.........\n'+
'.........\n'+
'..***....\n'+
'.**.**...\n'+
'.**.**...\n'+
'..***....\n'+
'.***.**..\n'+
'**.***...\n'+
'**..**...\n'+
'**..**...\n'+
'.***.**..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'+':
'.........\n'+
'.........\n'+
'.........\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'********.\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'|':
'.........\n'+
'.........\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'.........\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'≈':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.***.**..\n'+
'**.***...\n'+
'.........\n'+
'.***.**..\n'+
'**.***...\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'~':
'.........\n'+
'.........\n'+
'.***.**..\n'+
'**.***...\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n',

'_':
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'.........\n'+
'********.\n'+
'.........\n',

'A':
'.........\n'+
'.........\n'+
'...*.....\n'+
'..***....\n'+
'.**.**...\n'+
'**...**..\n'+
'**...**..\n'+
'*******..\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'B':
'.........\n'+
'.........\n'+
'******...\n'+
'.**..**..\n'+
'.**..**..\n'+
'.**..**..\n'+
'.*****...\n'+
'.**..**..\n'+
'.**..**..\n'+
'.**..**..\n'+
'******...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'C':
'.........\n'+
'.........\n'+
'..****...\n'+
'.**..**..\n'+
'**....*..\n'+
'**.......\n'+
'**.......\n'+
'**.......\n'+
'**....*..\n'+
'.**..**..\n'+
'..****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'D':
'.........\n'+
'.........\n'+
'*****....\n'+
'.**.**...\n'+
'.**..**..\n'+
'.**..**..\n'+
'.**..**..\n'+
'.**..**..\n'+
'.**..**..\n'+
'.**.**...\n'+
'*****....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'E':
'.........\n'+
'.........\n'+
'*******..\n'+
'.**..**..\n'+
'.**...*..\n'+
'.**.*....\n'+
'.****....\n'+
'.**.*....\n'+
'.**...*..\n'+
'.**..**..\n'+
'*******..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'F':
'.........\n'+
'.........\n'+
'*******..\n'+
'.**..**..\n'+
'.**...*..\n'+
'.**.*....\n'+
'.****....\n'+
'.**.*....\n'+
'.**......\n'+
'.**......\n'+
'****.....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'G':
'.........\n'+
'.........\n'+
'..****...\n'+
'.**..**..\n'+
'**....*..\n'+
'**.......\n'+
'**.......\n'+
'**.****..\n'+
'**...**..\n'+
'.**..**..\n'+
'..***.*..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'H':
'.........\n'+
'.........\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'*******..\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'I':
'.........\n'+
'.........\n'+
'..****...\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'..****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'J':
'.........\n'+
'.........\n'+
'...****..\n'+
'....**...\n'+
'....**...\n'+
'....**...\n'+
'....**...\n'+
'....**...\n'+
'**..**...\n'+
'**..**...\n'+
'.****....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'K':
'.........\n'+
'.........\n'+
'***..**..\n'+
'.**..**..\n'+
'.**.**...\n'+
'.**.**...\n'+
'.****....\n'+
'.**.**...\n'+
'.**.**...\n'+
'.**..**..\n'+
'***..**..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'L':
'.........\n'+
'.........\n'+
'****.....\n'+
'.**......\n'+
'.**......\n'+
'.**......\n'+
'.**......\n'+
'.**......\n'+
'.**...*..\n'+
'.**..**..\n'+
'*******..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'M':
'.........\n'+
'.........\n'+
'**....**.\n'+
'***..***.\n'+
'********.\n'+
'**.**.**.\n'+
'**....**.\n'+
'**....**.\n'+
'**....**.\n'+
'**....**.\n'+
'**....**.\n'+
'.........\n'+
'.........\n'+
'.........\n',

'N':
'.........\n'+
'.........\n'+
'**...**..\n'+
'***..**..\n'+
'****.**..\n'+
'*******..\n'+
'**.****..\n'+
'**..***..\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'O':
'.........\n'+
'.........\n'+
'..***....\n'+
'.**.**...\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'.**.**...\n'+
'..***....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'P':
'.........\n'+
'.........\n'+
'******...\n'+
'.**..**..\n'+
'.**..**..\n'+
'.**..**..\n'+
'.*****...\n'+
'.**......\n'+
'.**......\n'+
'.**......\n'+
'****.....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'Q':
'.........\n'+
'.........\n'+
'.*****...\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'**.*.**..\n'+
'**.****..\n'+
'.*****...\n'+
'....**...\n'+
'....***..\n'+
'.........\n'+
'.........\n',

'R':
'.........\n'+
'.........\n'+
'******...\n'+
'.**..**..\n'+
'.**..**..\n'+
'.**..**..\n'+
'.*****...\n'+
'.**.**...\n'+
'.**..**..\n'+
'.**..**..\n'+
'***..**..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'S':
'.........\n'+
'.........\n'+
'.*****...\n'+
'**...**..\n'+
'**...**..\n'+
'.**......\n'+
'..***....\n'+
'....**...\n'+
'**...**..\n'+
'**...**..\n'+
'.*****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'T':
'.........\n'+
'.........\n'+
'********.\n'+
'**.**.**.\n'+
'*..**..*.\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'..****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'U':
'.........\n'+
'.........\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'**...**..\n'+
'.*****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'V':
'.........\n'+
'.........\n'+
'**....**.\n'+
'**....**.\n'+
'**....**.\n'+
'**....**.\n'+
'**....**.\n'+
'**....**.\n'+
'.**..**..\n'+
'..****...\n'+
'...**....\n'+
'.........\n'+
'.........\n'+
'.........\n',

'W':
'.........\n'+
'.........\n'+
'**....**.\n'+
'**....**.\n'+
'**....**.\n'+
'**....**.\n'+
'**.**.**.\n'+
'**.**.**.\n'+
'********.\n'+
'.**..**..\n'+
'.**..**..\n'+
'.........\n'+
'.........\n'+
'.........\n',

'X':
'.........\n'+
'.........\n'+
'**....**.\n'+
'**....**.\n'+
'.**..**..\n'+
'..****...\n'+
'...**....\n'+
'..****...\n'+
'.**..**..\n'+
'**....**.\n'+
'**....**.\n'+
'.........\n'+
'.........\n'+
'.........\n',

'Y':
'.........\n'+
'.........\n'+
'**....**.\n'+
'**....**.\n'+
'**....**.\n'+
'.**..**..\n'+
'..****...\n'+
'...**....\n'+
'...**....\n'+
'...**....\n'+
'..****...\n'+
'.........\n'+
'.........\n'+
'.........\n',

'Z':
'.........\n'+
'.........\n'+
'********.\n'+
'**....**.\n'+
'*....**..\n'+
'....**...\n'+
'...**....\n'+
'..**.....\n'+
'.**....*.\n'+
'**....**.\n'+
'********.\n'+
'.........\n'+
'.........\n'+
'.........\n',

};

},{}],7:[function(require,module,exports){
'use strict';

var BT_DIGIT_TO_N = {
  i:-1,   '-':-1, 't':-1, 'T':-1,
  0:0,    '.':0,
  1:1,    '+':1
};

var N_TO_BT_DIGIT = {
  '-1':'i',
  0:'0',
  1:'1'
};

var pow = function(a,b) {
  // return a**b; // cleaner, but requires ES7 or babel-node --experimental
  return Math.pow(a,b)|0;
};
var pow3 = function(b) {
  return pow(3, b);
};

// parse balanced ternary string to signed integer
function bts2n(s) {
  var n = 0;
  for (var i = 0; i < s.length; ++i) {
    var ch = s.charAt(i);
    var digit = BT_DIGIT_TO_N[ch];
    if (digit === undefined) throw new Error('bts2n('+s+'): invalid digit character: '+ch);
    //console.log(i,digit,3**i,n,s,ch);
    n += pow3(s.length - i - 1) * digit;
  }
  return n;
}


// signed integer to balanced ternary string
function n2bts(n_) {
  var neg = n_ < 0;
  var n = Math.abs(n_);
  var s = '';
  do {
    var digit = n % 3;

    // balance the ternary http://stackoverflow.com/questions/26456597/how-to-convert-from-unbalanced-to-balanced-ternary
    if (digit === 2) {
      digit = -1;
      ++n;
    }

    //console.log('digit',digit,n,n_,s);

    // if number has negative sign, flip all digits
    if (neg) {
      digit = -digit;
    }

    s = N_TO_BT_DIGIT[digit] + s;
    n = ~~(n / 3);    // truncate, not floor! negatives

  } while(n);
  //console.log('n2bts',n_,s);
  return s;
}

module.exports = {
  bts2n: bts2n,
  n2bts: n2bts,
  BT_DIGIT_TO_N: BT_DIGIT_TO_N,
  N_TO_BT_DIGIT: N_TO_BT_DIGIT
};

},{}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
module.exports = function(string, size, options) {
  var escapecolor, i, j, pad, prefix, ref, ref1;
  if (options == null) {
    options = {};
  }
  prefix = typeof string === 'number';
  if (prefix) {
    ref = [string, size], size = ref[0], string = ref[1];
  }
  if (typeof options === 'string') {
    options = {
      char: options
    };
  }
  if (options.char == null) {
    options.char = ' ';
  }
  string = string.toString();
  pad = '';
  if (options.colors) {
    escapecolor = /\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]/g;
    size += string.length - string.replace(escapecolor, '').length;
  }
  size = size - string.length;
  for (i = j = 0, ref1 = size; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
    pad += options.char;
  }
  if (prefix) {
    return pad + string;
  } else {
    return string + pad;
  }
};

},{}],9:[function(require,module,exports){
'use strict';

var bts2n = require('balanced-ternary').bts2n;
var n2bts = require('balanced-ternary').n2bts;
var N_TO_BT_DIGIT = require('balanced-ternary').N_TO_BT_DIGIT;
var BT_DIGIT_TO_N = require('balanced-ternary').BT_DIGIT_TO_N;

// get trit value at ith index of n, i of 0=least significant
function get_trit(n,i) {
  // convert entire number to balanced ternary string then slice
  // would be nice to extract without converting everything, see extract_digit(), which
  // works for unbalanced ternary, but balanced converts 2 -> 1i, so individual digit extraction
  // is more difficult -- see https://en.wikipedia.org/wiki/Balanced_ternary#Conversion_from_ternary
  var s = n2bts(n);
  return ~~BT_DIGIT_TO_N[s.charAt(s.length - i - 1)];
}

// set ith trit (0=lst) of n to zero
function clear_trit(n,i) {
  var t0 = get_trit(n,i);
  var t_value = Math.pow(3,i) * t0;
  return n - t_value;
}

// set ith trit (0=lst) of n to trit t=-1, 0, or 1
function set_trit(n,i,t) {
  return clear_trit(n,i) + Math.pow(3,i) * t;
}

// extract trits of n from range a to b (0=lst)
function slice_trits(n,a,b) {
  var s = n2bts(n);
  var ss = s.substring(s.length - b, s.length - a);
  return bts2n(ss);
}
module.exports = {
  get_trit: get_trit,
  clear_trit: clear_trit,
  set_trit: set_trit,
  slice_trits: slice_trits
};

},{"balanced-ternary":10}],10:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"dup":7}],11:[function(require,module,exports){
'use strict';

var n2bts = require('balanced-ternary').n2bts;
var BT_DIGIT_TO_N = require('balanced-ternary').BT_DIGIT_TO_N;
var TRITS_PER_TRYTE = 5; // 5-trit trytes backed by 8-bit bytes Int8Array
var set_trit = require('trit-getset').set_trit;
var pad = require('pad');

function Tricanvas(opts) {
  opts = opts || {};
  this.addressTryteSize = opts.addressTryteSize || 4; // 4 trytes each coordinate (ex: aaaa bbbb)
  this.width = opts.width || Math.pow(3, this.addressTryteSize)*TRITS_PER_TRYTE;
  this.height = opts.height || this.width;
  this.scaleW = 1;
  this.scaleH = 1;
  this.canvas = opts.canvas;
  if (!this.canvas) {
    this.canvas = document.createElement('canvas');
    this.canvas.style.width = this.width * this.scaleW + 'px';
    this.canvas.style.height = this.height * this.scaleH + 'px';
    this.canvas.style.border = this.border || '1px solid black';
    this.canvas.style.imageRendering = 'pixelated';
    document.body.appendChild(this.canvas);
  }

  this.context = this.canvas.getContext('2d');
  this.canvas.width = this.width;
  this.canvas.height = this.height;
  this.imageData = this.context.createImageData(this.width, this.height);

  this.tritCount = this.width * this.height;
  this.tryteCount = this.tritCount / TRITS_PER_TRYTE;
  if ((this.tryteCount|0) !== this.tryteCount) throw new Error('non-integral tryte count: ' + tryteCount + ', trits='+this.tritCount);
  this.tritmap = opts.tritmap || new Int8Array(this.tryteCount);
  if (this.tritmap.length !== this.tryteCount) throw new Error('tritmap option unexpected length: '+this.tritmap.length+' !== '+this.tryteCount);

  this.negativeColor = opts.negativeColor || [255, 0, 0, 255];    // red
  this.zeroColor = opts.zeroColor || [0, 0, 0, 255];          // black
  this.positiveColor = opts.positiveColor || [0, 255, 0, 255];    // green
}

Tricanvas.prototype.refresh = function() {
  for (var i = 0; i < this.tryteCount; ++i) {
    var tryte = this.tritmap[i];
    var trits = pad(5, n2bts(tryte), '0');

    for (var j = 0; j < TRITS_PER_TRYTE; ++j) {
      var index = i * TRITS_PER_TRYTE + j;

      var trit = BT_DIGIT_TO_N[trits.charAt(j)];

      var color;

      if (trit === -1) {
        color = this.negativeColor;
      } else if (trit === 1) {
        color = this.positiveColor;
      } else {
        color = this.zeroColor;
      }

      this.imageData.data[index * 4 + 0] = color[0];
      this.imageData.data[index * 4 + 1] = color[1];
      this.imageData.data[index * 4 + 2] = color[2];
      this.imageData.data[index * 4 + 3] = color[3];
    }
  }
  //console.log(this.imageData);

  this.context.putImageData(this.imageData, 0, 0);
};

Tricanvas.prototype.writeTrit = function(trit, x, y) {
  var index = y * this.width + x;

  var tryteIndex = (index / TRITS_PER_TRYTE)|0;
  var tritIndex = TRITS_PER_TRYTE - (index % TRITS_PER_TRYTE) - 1;

  this.tritmap[tryteIndex] = set_trit(this.tritmap[tryteIndex], tritIndex, trit);
};

Tricanvas.prototype.writeTrits = function(bts, width, height, rowStart, colStart) {
  rowStart = rowStart || 0;
  colStart = colStart || 0;

  for (var i = 0; i < bts.length; ++i) {
    var trit = BT_DIGIT_TO_N[bts.charAt(i)];
    if (trit === undefined) throw new Error('writeTrits('+bts+'): invalid trit: '+trit);

    var row = ((i / width)|0) + height*rowStart;
    var col = i % width + width*colStart;
    //console.log(i,row,col,trit);
    this.writeTrit(trit, col, row);
  }
};

module.exports = function(opts) {
  return new Tricanvas(opts);
}

},{"balanced-ternary":7,"pad":8,"trit-getset":9}],12:[function(require,module,exports){
'use strict';

var Tricanvas = require('tritmapped-canvas');

var toTritmap  = require('trit-text').toTritmap9x14;
var CHAR_HEIGHT = 14;
var CHAR_WIDTH = 9;

var fromUnicode = require('trit-text').fromUnicode;
var fromEvent = require('trit-text').fromEvent;


function Triterm(opts) {
  this.tc = Tricanvas(opts);
  this.refresh();

  this.cursorX = 0;
  this.cursorY = 0;

  this.handleInput = opts.handleInput;
  this.cooked = opts.cooked !== undefined ? opts.cooked : true;

  this.colCount = this.tc.width / CHAR_WIDTH;
  this.rowCount = this.tc.height / CHAR_HEIGHT;

  window.addEventListener('keydown', this.onkeydown.bind(this));
};

Triterm.prototype.writeUChar = function(u) {
  return this.writeTTChar(fromUnicode(u));
};

Triterm.prototype.setTTChar = function(tt, x, y) {
  this.tc.writeTrits(toTritmap(tt), CHAR_WIDTH, CHAR_HEIGHT, y, x);
};

Triterm.prototype.refresh = function() {
  this.tc.refresh();
};

Triterm.prototype.writeTTChar = function(tt) {
  if (this.cooked) {
    if (tt == 12) { // trit-text newline
      this.cursorY++;
      this.cursorX = 0;
      return false; // not displayed visually
    }
  }

  this.setTTChar(tt, this.cursorX, this.cursorY);
  this.forward();
};

Triterm.prototype.forward = function() {
  ++this.cursorX;

  if (this.cursorX >= this.colCount) {
    this.cursorX = 0;
    ++this.cursorY;
  }
  if (this.cursorY >= this.rowCount) {
    this.cursorY = 0;
    this.cursorX = 0;
  }
}

Triterm.prototype.backspace = function() {
  --this.cursorX;

  if (this.cursorX < 0) {
    this.cursorX = 0;
    --this.cursorY;
  }

  if (this.cursorY < 0) {
    this.cursorY = 0; // TODO
  }

  this.setTTChar(0);
};

Triterm.prototype.onkeydown = function(ev) {
  //console.log(ev);

  if (ev.metaKey) {
    // don't intercept cmd-key, allow e.g. cmd-r to reload browser
    return;
  }

  ev.preventDefault(); // allow intercepting ctrl-key without executing browser default

  var tt = fromEvent(ev);

  if (this.handleInput) this.handleInput.call(this, tt, ev);
};

module.exports = function(opts) {
  return new Triterm(opts);
};


},{"trit-text":4,"tritmapped-canvas":11}]},{},[1]);
